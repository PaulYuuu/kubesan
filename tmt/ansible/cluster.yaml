---
- name: Deploy k8s cluster for testing
  hosts: all
  tasks:
    - name: Ensure /home/kcli directory exists
      ansible.builtin.file:
        path: /home/kcli
        state: directory
        mode: '0755'

    - name: Create the default storage pool
      community.libvirt.virt_pool:
        command: define
        name: default
        xml: |
          <pool type='dir'>
            <name>default</name>
            <target>
              <path>/home/kcli</path>
            </target>
          </pool>

    - name: Start the default storage pool
      community.libvirt.virt_pool:
        command: start
        name: default

    - name: Create ssh-key
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        generate_ssh_key: yes
        password: kubesan

    - name: Create a k8s cluster
      ansible.builtin.command:
        cmd: kcli create cluster generic test --param ctlplanes=1 --param workers=1 --param domain=kubesan.corp --param memory=8192 --param image=fedora41 --param cmds=['dnf -y install python3-libdnf5']

    - name: Copy kubeconfig
      ansible.builtin.copy:
        src: ~/.kcli/clusters/test/auth/kubeconfig
        dest: ~/.kube/config
        remote_src: true

    # hardcode here, format: <cluster_name>-worker-<index>
    - name: Get info from worker
      ansible.builtin.command: kcli info vm test-worker-0 -o json
      register: worker_info

    - name: Format worker info
      ansible.builtin.set_fact:
        worker_info: "{{ worker_info.stdout | from_json }}"

    - name: Allow password login for worker
      ansible.builtin.command: kcli ssh {{ worker_info.name }} 'echo "{{ worker_info.user }}:kubesan" | sudo chpasswd'

    - name: Wait for nodes to be ready
      ansible.builtin.command:
        cmd: kubectl wait --for=condition=Ready nodes --all --timeout=5m

    - name: Add worker node to worker_nodes group
      ansible.builtin.add_host:
        name: "{{ worker_info.name }}"
        ansible_host: "{{ worker_info.ip }}"
        ansible_user: "{{ worker_info.user }}"
        ansible_ssh_pass: kubesan
        groups: worker_nodes
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o ProxyCommand='ssh -i /etc/citool.d/id_rsa_artemis -W %h:%p {{ inventory_hostname }}'"

- name: Prepare worker nodes
  hosts: worker_nodes
  become: true
  tasks:
    - name: Install required package
      ansible.builtin.package:
        name:
          - lvm2-lockd
          - nbd
          - sanlock
        state: present

    - name: Create module file to load required modules
      ansible.builtin.copy:
        dest: /etc/modules-load.d/kubesan.conf
        content: |
          nbd
          dm-thin-pool
        owner: root
        group: root
        mode: '0644'

    - name: Restart systemd-modules-load service
      ansible.builtin.systemd:
        name: systemd-modules-load.service
        enabled: true
        state: restarted

    - name: Enable LVM lock daemon in lvm.conf
      ansible.builtin.replace:
        path: /etc/lvm/lvm.conf
        regexp: '# use_lvmlockd = 0'
        replace: 'use_lvmlockd = 1'

    - name: Update host_id in /etc/lvm/lvmlocal.conf
      ansible.builtin.replace:
        path: /etc/lvm/lvmlocal.conf
        regexp: '# host_id = 0'
        replace: "host_id = {{ ansible_host.split('.')[-1] }}"

    - name: Update use_watchdog in /etc/sanlock/sanlock.conf
      ansible.builtin.replace:
        path: /etc/sanlock/sanlock.conf
        regexp: '# use_watchdog = 1'
        replace: 'use_watchdog = 0'

    - name: Create nbd-client service file
      ansible.builtin.copy:
        dest: /etc/systemd/system/nbd-client.service
        content: |
          [Unit]
          Description=NBD client
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=nbd-client {{ ansible_default_ipv4.gateway }} 10909 /dev/nbd0
          ExecStop=nbd-client -d /dev/nbd0
          RemainAfterExit=true
          Restart=on-failure
          RestartSec=2
          User=root
          TimeoutSec=600

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Create vg-lock service file
      ansible.builtin.copy:
        dest: /etc/systemd/system/vg-lock.service
        content: |
          [Unit]
          Description=KubeSAN LVM Lock Service
          After=sanlock.service lvmlockd.service nbd-client.service
          Requires=sanlock.service lvmlockd.service nbd-client.service

          [Service]
          Type=oneshot
          ExecStart=vgchange --devicesfile kubesan-vg --lock-start
          RemainAfterExit=yes
          StandardOutput=journal

          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd to pick up new service
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable and start nbd-client service
      ansible.builtin.systemd:
        name: nbd-client
        enabled: true
        state: started

    - name: Enable and start sanlock and lvmlockd services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: restarted
      loop:
        - sanlock
        - lvmlockd

    - name: Create a shared volume group
      ansible.builtin.command: vgcreate --shared kubesan-vg /dev/nbd0
      when: ansible_hostname == groups['worker_nodes'][0]

    - name: Add SAN LUN to LVM
      ansible.builtin.command: lvmdevices --devicesfile kubesan-vg --adddev /dev/nbd0

    - name: check if sanlock and lvmlockd are configured correctly
      ansible.builtin.command: vgchange --devicesfile kubesan-vg --lock-start

    - name: Enable and start vg-lock service
      ansible.builtin.systemd:
        name: vg-lock
        enabled: true
        state: started
